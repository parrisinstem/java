# DEFINITION
# A linked list is a data structure consisting of a sequence of elements,
# where each element contains a reference (link) to the next element in the sequence. 
# It is a dynamic data structure that can grow or shrink in size during program execution.


# STRUCTURE
# A linked list is composed of nodes, and each node contains two parts: 
# data and a reference to the next node in the sequence. 
# The last node typically points to null or None to indicate the end of the list.

# TYPES

# Singly Linked List: Each node has a reference to the next node.
# Doubly Linked List: Each node has references to both the next and previous nodes.
# Circular Linked List: The last node points back to the first node, forming a circle.

# WHEN TO USE

# When the size of the data is unknown or can change dynamically.
# When frequent insertion or deletion operations are required.
# When memory needs to be allocated dynamically, as linked lists can be easily expanded or contracted.

# ADVANTAGES

# Dynamic Size: Linked lists can grow or shrink dynamically 
# Efficient Insertions and Deletions: Insertions and deletions can be performed in constant time 
# Memory Efficiency: Linked lists only use memory that is required for the elements themselves and the links

# DISADVANTAGES

# Random Access: Accessing an element in a linked list requires traversing from the beginning, which takes linear time (O(n))
# Extra Memory Usage: Linked lists require extra memory for storing the links between nodes, which can be inefficient if the links occupy a significant portion of memory.
# Complex Implementation: Have to define multiple functions/methods compared to simple [] for arrays 