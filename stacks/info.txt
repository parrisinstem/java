DEFINITION
Stacks are a fundamental data structure that follows the Last-In-First-Out (LIFO) principle.
They can be visualized as a stack of items where the last item added is the first one to be removed.

STRUCTURE

Push: Adding an item to the top of the stack is called "pushing" onto the stack.
Pop: Removing the top item from the stack is called "popping" from the stack.
Peek: Looking at the top item without removing it is called "peeking".

REAL WORLD

Think of a stack of plates, where you add new plates on top and remove plates from the top as well.
A practical example of a stack is the call stack in programming. 
When a function is called, the program pushes the function call onto the call stack. 
The most recent function call is always at the top, and when the function finishes executing, 
it is popped from the stack, allowing the program to return to the previous function.


ADVANTAGES

Simple and efficient
Function call management: Stacks are used in programming to manage function calls, 
keeping track of the execution order and allowing functions to return to the correct point.

DISADVANTAGES

Limited access: Stacks have restricted access since only the top item can be accessed or removed. 
To access items in the middle, you need to pop off all the items above.
Size limitations: Stacks can have a fixed maximum size, and once the stack is full, it cannot accommodate additional items.